
STM32F100C8T6_AC_termocontrol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000172c  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080018fc  080018fc  000118fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800192c  0800192c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800192c  0800192c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800192c  0800192c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800192c  0800192c  0001192c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001930  08001930  00011930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  2000000c  08001940  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000088  08001940  00020088  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000797e  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014b7  00000000  00000000  000279b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000950  00000000  00000000  00028e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000898  00000000  00000000  000297c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000011bf  00000000  00000000  0002a058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000098d3  00000000  00000000  0002b217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006350c  00000000  00000000  00034aea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00097ff6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000261c  00000000  00000000  00098048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080018e4 	.word	0x080018e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	080018e4 	.word	0x080018e4

08000210 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000214:	f000 f9c5 	bl	80005a2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000218:	f000 f812 	bl	8000240 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800021c:	f000 f89a 	bl	8000354 <MX_GPIO_Init>
	MX_TIM3_Init();
 8000220:	f000 f84a 	bl	80002b8 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim3);
 8000224:	4804      	ldr	r0, [pc, #16]	; (8000238 <main+0x28>)
 8000226:	f001 f89f 	bl	8001368 <HAL_TIM_Base_Start>
	pid_Init(K_P * SCALING_FACTOR, K_I * SCALING_FACTOR, K_D * SCALING_FACTOR,
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <main+0x2c>)
 800022c:	2200      	movs	r2, #0
 800022e:	2100      	movs	r1, #0
 8000230:	2080      	movs	r0, #128	; 0x80
 8000232:	f000 f8e0 	bl	80003f6 <pid_Init>
	//uint16_t temperature = 0;
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000236:	e7fe      	b.n	8000236 <main+0x26>
 8000238:	20000028 	.word	0x20000028
 800023c:	20000070 	.word	0x20000070

08000240 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b090      	sub	sp, #64	; 0x40
 8000244:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000246:	f107 0318 	add.w	r3, r7, #24
 800024a:	2228      	movs	r2, #40	; 0x28
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f001 fb40 	bl	80018d4 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
 8000260:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000262:	2302      	movs	r3, #2
 8000264:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000266:	2301      	movs	r3, #1
 8000268:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800026a:	2310      	movs	r3, #16
 800026c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800026e:	2300      	movs	r3, #0
 8000270:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000272:	f107 0318 	add.w	r3, r7, #24
 8000276:	4618      	mov	r0, r3
 8000278:	f000 fc6c 	bl	8000b54 <HAL_RCC_OscConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x46>
	{
		Error_Handler();
 8000282:	f000 f8b3 	bl	80003ec <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000286:	230f      	movs	r3, #15
 8000288:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800028a:	2300      	movs	r3, #0
 800028c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	2100      	movs	r1, #0
 800029e:	4618      	mov	r0, r3
 80002a0:	f000 feda 	bl	8001058 <HAL_RCC_ClockConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x6e>
	{
		Error_Handler();
 80002aa:	f000 f89f 	bl	80003ec <Error_Handler>
	}
}
 80002ae:	bf00      	nop
 80002b0:	3740      	adds	r7, #64	; 0x40
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
	...

080002b8 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b086      	sub	sp, #24
 80002bc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig =
 80002be:	f107 0308 	add.w	r3, r7, #8
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
	{ 0 };
	TIM_MasterConfigTypeDef sMasterConfig =
 80002cc:	463b      	mov	r3, r7
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
	{ 0 };

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80002d4:	4b1d      	ldr	r3, [pc, #116]	; (800034c <MX_TIM3_Init+0x94>)
 80002d6:	4a1e      	ldr	r2, [pc, #120]	; (8000350 <MX_TIM3_Init+0x98>)
 80002d8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 7;
 80002da:	4b1c      	ldr	r3, [pc, #112]	; (800034c <MX_TIM3_Init+0x94>)
 80002dc:	2207      	movs	r2, #7
 80002de:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002e0:	4b1a      	ldr	r3, [pc, #104]	; (800034c <MX_TIM3_Init+0x94>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000;
 80002e6:	4b19      	ldr	r3, [pc, #100]	; (800034c <MX_TIM3_Init+0x94>)
 80002e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80002ec:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002ee:	4b17      	ldr	r3, [pc, #92]	; (800034c <MX_TIM3_Init+0x94>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002f4:	4b15      	ldr	r3, [pc, #84]	; (800034c <MX_TIM3_Init+0x94>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80002fa:	4814      	ldr	r0, [pc, #80]	; (800034c <MX_TIM3_Init+0x94>)
 80002fc:	f000 ffe4 	bl	80012c8 <HAL_TIM_Base_Init>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <MX_TIM3_Init+0x52>
	{
		Error_Handler();
 8000306:	f000 f871 	bl	80003ec <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800030a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800030e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000310:	f107 0308 	add.w	r3, r7, #8
 8000314:	4619      	mov	r1, r3
 8000316:	480d      	ldr	r0, [pc, #52]	; (800034c <MX_TIM3_Init+0x94>)
 8000318:	f001 f878 	bl	800140c <HAL_TIM_ConfigClockSource>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_TIM3_Init+0x6e>
	{
		Error_Handler();
 8000322:	f000 f863 	bl	80003ec <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000326:	2300      	movs	r3, #0
 8000328:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800032a:	2300      	movs	r3, #0
 800032c:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800032e:	463b      	mov	r3, r7
 8000330:	4619      	mov	r1, r3
 8000332:	4806      	ldr	r0, [pc, #24]	; (800034c <MX_TIM3_Init+0x94>)
 8000334:	f001 fa44 	bl	80017c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <MX_TIM3_Init+0x8a>
	{
		Error_Handler();
 800033e:	f000 f855 	bl	80003ec <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000342:	bf00      	nop
 8000344:	3718      	adds	r7, #24
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	20000028 	.word	0x20000028
 8000350:	40000400 	.word	0x40000400

08000354 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b088      	sub	sp, #32
 8000358:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 800035a:	f107 0310 	add.w	r3, r7, #16
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000368:	4b1e      	ldr	r3, [pc, #120]	; (80003e4 <MX_GPIO_Init+0x90>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a1d      	ldr	r2, [pc, #116]	; (80003e4 <MX_GPIO_Init+0x90>)
 800036e:	f043 0320 	orr.w	r3, r3, #32
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b1b      	ldr	r3, [pc, #108]	; (80003e4 <MX_GPIO_Init+0x90>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f003 0320 	and.w	r3, r3, #32
 800037c:	60fb      	str	r3, [r7, #12]
 800037e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000380:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <MX_GPIO_Init+0x90>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a17      	ldr	r2, [pc, #92]	; (80003e4 <MX_GPIO_Init+0x90>)
 8000386:	f043 0308 	orr.w	r3, r3, #8
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <MX_GPIO_Init+0x90>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0308 	and.w	r3, r3, #8
 8000394:	60bb      	str	r3, [r7, #8]
 8000396:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000398:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <MX_GPIO_Init+0x90>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	4a11      	ldr	r2, [pc, #68]	; (80003e4 <MX_GPIO_Init+0x90>)
 800039e:	f043 0304 	orr.w	r3, r3, #4
 80003a2:	6193      	str	r3, [r2, #24]
 80003a4:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <MX_GPIO_Init+0x90>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	f003 0304 	and.w	r3, r3, #4
 80003ac:	607b      	str	r3, [r7, #4]
 80003ae:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DS18B20_DQ_GPIO_Port, DS18B20_DQ_Pin, GPIO_PIN_RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003b6:	480c      	ldr	r0, [pc, #48]	; (80003e8 <MX_GPIO_Init+0x94>)
 80003b8:	f000 fbb4 	bl	8000b24 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : DS18B20_DQ_Pin */
	GPIO_InitStruct.Pin = DS18B20_DQ_Pin;
 80003bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003c0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80003c2:	2311      	movs	r3, #17
 80003c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ca:	2302      	movs	r3, #2
 80003cc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(DS18B20_DQ_GPIO_Port, &GPIO_InitStruct);
 80003ce:	f107 0310 	add.w	r3, r7, #16
 80003d2:	4619      	mov	r1, r3
 80003d4:	4804      	ldr	r0, [pc, #16]	; (80003e8 <MX_GPIO_Init+0x94>)
 80003d6:	f000 fa21 	bl	800081c <HAL_GPIO_Init>

}
 80003da:	bf00      	nop
 80003dc:	3720      	adds	r7, #32
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40021000 	.word	0x40021000
 80003e8:	40010c00 	.word	0x40010c00

080003ec <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f0:	b672      	cpsid	i
}
 80003f2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80003f4:	e7fe      	b.n	80003f4 <Error_Handler+0x8>

080003f6 <pid_Init>:
 *  \param d_factor  Derivate term.
 *  \param pid  Struct with PID status.
 */
void pid_Init(int16_t p_factor, int16_t i_factor, int16_t d_factor, struct PID_DATA *pid)
// Set up PID controller parameters
{
 80003f6:	b480      	push	{r7}
 80003f8:	b085      	sub	sp, #20
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	607b      	str	r3, [r7, #4]
 80003fe:	4603      	mov	r3, r0
 8000400:	81fb      	strh	r3, [r7, #14]
 8000402:	460b      	mov	r3, r1
 8000404:	81bb      	strh	r3, [r7, #12]
 8000406:	4613      	mov	r3, r2
 8000408:	817b      	strh	r3, [r7, #10]
  // Start values for PID controller
  pid->sumError = 0;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	2200      	movs	r2, #0
 800040e:	605a      	str	r2, [r3, #4]
  pid->lastProcessValue = 0;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	2200      	movs	r2, #0
 8000414:	801a      	strh	r2, [r3, #0]
  // Tuning constants for PID loop
  pid->P_Factor = p_factor;
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	89fa      	ldrh	r2, [r7, #14]
 800041a:	811a      	strh	r2, [r3, #8]
  pid->I_Factor = i_factor;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	89ba      	ldrh	r2, [r7, #12]
 8000420:	815a      	strh	r2, [r3, #10]
  pid->D_Factor = d_factor;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	897a      	ldrh	r2, [r7, #10]
 8000426:	819a      	strh	r2, [r3, #12]
  // Limits to avoid overflow
  pid->maxError = MAX_INT / (pid->P_Factor + 1);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800042e:	3301      	adds	r3, #1
 8000430:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000434:	fb92 f3f3 	sdiv	r3, r2, r3
 8000438:	b21a      	sxth	r2, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	81da      	strh	r2, [r3, #14]
  pid->maxSumError = MAX_I_TERM / (pid->I_Factor + 1);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000444:	3301      	adds	r3, #1
 8000446:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 800044a:	fb92 f2f3 	sdiv	r2, r2, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	611a      	str	r2, [r3, #16]
}
 8000452:	bf00      	nop
 8000454:	3714      	adds	r7, #20
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr

0800045c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800045c:	b480      	push	{r7}
 800045e:	b085      	sub	sp, #20
 8000460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000462:	4b15      	ldr	r3, [pc, #84]	; (80004b8 <HAL_MspInit+0x5c>)
 8000464:	699b      	ldr	r3, [r3, #24]
 8000466:	4a14      	ldr	r2, [pc, #80]	; (80004b8 <HAL_MspInit+0x5c>)
 8000468:	f043 0301 	orr.w	r3, r3, #1
 800046c:	6193      	str	r3, [r2, #24]
 800046e:	4b12      	ldr	r3, [pc, #72]	; (80004b8 <HAL_MspInit+0x5c>)
 8000470:	699b      	ldr	r3, [r3, #24]
 8000472:	f003 0301 	and.w	r3, r3, #1
 8000476:	60bb      	str	r3, [r7, #8]
 8000478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800047a:	4b0f      	ldr	r3, [pc, #60]	; (80004b8 <HAL_MspInit+0x5c>)
 800047c:	69db      	ldr	r3, [r3, #28]
 800047e:	4a0e      	ldr	r2, [pc, #56]	; (80004b8 <HAL_MspInit+0x5c>)
 8000480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000484:	61d3      	str	r3, [r2, #28]
 8000486:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <HAL_MspInit+0x5c>)
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000492:	4b0a      	ldr	r3, [pc, #40]	; (80004bc <HAL_MspInit+0x60>)
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	60fb      	str	r3, [r7, #12]
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004a6:	60fb      	str	r3, [r7, #12]
 80004a8:	4a04      	ldr	r2, [pc, #16]	; (80004bc <HAL_MspInit+0x60>)
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ae:	bf00      	nop
 80004b0:	3714      	adds	r7, #20
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40010000 	.word	0x40010000

080004c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a09      	ldr	r2, [pc, #36]	; (80004f4 <HAL_TIM_Base_MspInit+0x34>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d10b      	bne.n	80004ea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <HAL_TIM_Base_MspInit+0x38>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	4a08      	ldr	r2, [pc, #32]	; (80004f8 <HAL_TIM_Base_MspInit+0x38>)
 80004d8:	f043 0302 	orr.w	r3, r3, #2
 80004dc:	61d3      	str	r3, [r2, #28]
 80004de:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <HAL_TIM_Base_MspInit+0x38>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	f003 0302 	and.w	r3, r3, #2
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80004ea:	bf00      	nop
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr
 80004f4:	40000400 	.word	0x40000400
 80004f8:	40021000 	.word	0x40021000

080004fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000500:	e7fe      	b.n	8000500 <NMI_Handler+0x4>

08000502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000506:	e7fe      	b.n	8000506 <HardFault_Handler+0x4>

08000508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800050c:	e7fe      	b.n	800050c <MemManage_Handler+0x4>

0800050e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000512:	e7fe      	b.n	8000512 <BusFault_Handler+0x4>

08000514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000518:	e7fe      	b.n	8000518 <UsageFault_Handler+0x4>

0800051a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800051a:	b480      	push	{r7}
 800051c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800051e:	bf00      	nop
 8000520:	46bd      	mov	sp, r7
 8000522:	bc80      	pop	{r7}
 8000524:	4770      	bx	lr

08000526 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000526:	b480      	push	{r7}
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800052a:	bf00      	nop
 800052c:	46bd      	mov	sp, r7
 800052e:	bc80      	pop	{r7}
 8000530:	4770      	bx	lr

08000532 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000536:	bf00      	nop
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr

0800053e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000542:	f000 f86b 	bl	800061c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}

0800054a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800054e:	bf00      	nop
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr
	...

08000558 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000558:	480c      	ldr	r0, [pc, #48]	; (800058c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800055a:	490d      	ldr	r1, [pc, #52]	; (8000590 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800055c:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800055e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000560:	e002      	b.n	8000568 <LoopCopyDataInit>

08000562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000566:	3304      	adds	r3, #4

08000568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800056a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800056c:	d3f9      	bcc.n	8000562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800056e:	4a0a      	ldr	r2, [pc, #40]	; (8000598 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000570:	4c0a      	ldr	r4, [pc, #40]	; (800059c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000574:	e001      	b.n	800057a <LoopFillZerobss>

08000576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000578:	3204      	adds	r2, #4

0800057a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800057a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800057c:	d3fb      	bcc.n	8000576 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800057e:	f7ff ffe4 	bl	800054a <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000582:	f001 f983 	bl	800188c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000586:	f7ff fe43 	bl	8000210 <main>
  bx lr
 800058a:	4770      	bx	lr
  ldr r0, =_sdata
 800058c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000590:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000594:	08001934 	.word	0x08001934
  ldr r2, =_sbss
 8000598:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800059c:	20000088 	.word	0x20000088

080005a0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005a0:	e7fe      	b.n	80005a0 <ADC1_IRQHandler>

080005a2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a6:	2003      	movs	r0, #3
 80005a8:	f000 f904 	bl	80007b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ac:	200f      	movs	r0, #15
 80005ae:	f000 f805 	bl	80005bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b2:	f7ff ff53 	bl	800045c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b6:	2300      	movs	r3, #0
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	bd80      	pop	{r7, pc}

080005bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <HAL_InitTick+0x54>)
 80005c6:	681a      	ldr	r2, [r3, #0]
 80005c8:	4b12      	ldr	r3, [pc, #72]	; (8000614 <HAL_InitTick+0x58>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	4619      	mov	r1, r3
 80005ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80005d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80005da:	4618      	mov	r0, r3
 80005dc:	f000 f911 	bl	8000802 <HAL_SYSTICK_Config>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005e6:	2301      	movs	r3, #1
 80005e8:	e00e      	b.n	8000608 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2b0f      	cmp	r3, #15
 80005ee:	d80a      	bhi.n	8000606 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f0:	2200      	movs	r2, #0
 80005f2:	6879      	ldr	r1, [r7, #4]
 80005f4:	f04f 30ff 	mov.w	r0, #4294967295
 80005f8:	f000 f8e7 	bl	80007ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005fc:	4a06      	ldr	r2, [pc, #24]	; (8000618 <HAL_InitTick+0x5c>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000602:	2300      	movs	r3, #0
 8000604:	e000      	b.n	8000608 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000606:	2301      	movs	r3, #1
}
 8000608:	4618      	mov	r0, r3
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000000 	.word	0x20000000
 8000614:	20000008 	.word	0x20000008
 8000618:	20000004 	.word	0x20000004

0800061c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <HAL_IncTick+0x1c>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	461a      	mov	r2, r3
 8000626:	4b05      	ldr	r3, [pc, #20]	; (800063c <HAL_IncTick+0x20>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4413      	add	r3, r2
 800062c:	4a03      	ldr	r2, [pc, #12]	; (800063c <HAL_IncTick+0x20>)
 800062e:	6013      	str	r3, [r2, #0]
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr
 8000638:	20000008 	.word	0x20000008
 800063c:	20000084 	.word	0x20000084

08000640 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  return uwTick;
 8000644:	4b02      	ldr	r3, [pc, #8]	; (8000650 <HAL_GetTick+0x10>)
 8000646:	681b      	ldr	r3, [r3, #0]
}
 8000648:	4618      	mov	r0, r3
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	20000084 	.word	0x20000084

08000654 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f003 0307 	and.w	r3, r3, #7
 8000662:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <__NVIC_SetPriorityGrouping+0x44>)
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000670:	4013      	ands	r3, r2
 8000672:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800067c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000684:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000686:	4a04      	ldr	r2, [pc, #16]	; (8000698 <__NVIC_SetPriorityGrouping+0x44>)
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	60d3      	str	r3, [r2, #12]
}
 800068c:	bf00      	nop
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	bc80      	pop	{r7}
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	e000ed00 	.word	0xe000ed00

0800069c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <__NVIC_GetPriorityGrouping+0x18>)
 80006a2:	68db      	ldr	r3, [r3, #12]
 80006a4:	0a1b      	lsrs	r3, r3, #8
 80006a6:	f003 0307 	and.w	r3, r3, #7
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bc80      	pop	{r7}
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	6039      	str	r1, [r7, #0]
 80006c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	db0a      	blt.n	80006e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	b2da      	uxtb	r2, r3
 80006d0:	490c      	ldr	r1, [pc, #48]	; (8000704 <__NVIC_SetPriority+0x4c>)
 80006d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d6:	0112      	lsls	r2, r2, #4
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	440b      	add	r3, r1
 80006dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006e0:	e00a      	b.n	80006f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	4908      	ldr	r1, [pc, #32]	; (8000708 <__NVIC_SetPriority+0x50>)
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	f003 030f 	and.w	r3, r3, #15
 80006ee:	3b04      	subs	r3, #4
 80006f0:	0112      	lsls	r2, r2, #4
 80006f2:	b2d2      	uxtb	r2, r2
 80006f4:	440b      	add	r3, r1
 80006f6:	761a      	strb	r2, [r3, #24]
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop
 8000704:	e000e100 	.word	0xe000e100
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800070c:	b480      	push	{r7}
 800070e:	b089      	sub	sp, #36	; 0x24
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	f003 0307 	and.w	r3, r3, #7
 800071e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000720:	69fb      	ldr	r3, [r7, #28]
 8000722:	f1c3 0307 	rsb	r3, r3, #7
 8000726:	2b04      	cmp	r3, #4
 8000728:	bf28      	it	cs
 800072a:	2304      	movcs	r3, #4
 800072c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	3304      	adds	r3, #4
 8000732:	2b06      	cmp	r3, #6
 8000734:	d902      	bls.n	800073c <NVIC_EncodePriority+0x30>
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	3b03      	subs	r3, #3
 800073a:	e000      	b.n	800073e <NVIC_EncodePriority+0x32>
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	f04f 32ff 	mov.w	r2, #4294967295
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	fa02 f303 	lsl.w	r3, r2, r3
 800074a:	43da      	mvns	r2, r3
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	401a      	ands	r2, r3
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000754:	f04f 31ff 	mov.w	r1, #4294967295
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	fa01 f303 	lsl.w	r3, r1, r3
 800075e:	43d9      	mvns	r1, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000764:	4313      	orrs	r3, r2
         );
}
 8000766:	4618      	mov	r0, r3
 8000768:	3724      	adds	r7, #36	; 0x24
 800076a:	46bd      	mov	sp, r7
 800076c:	bc80      	pop	{r7}
 800076e:	4770      	bx	lr

08000770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	3b01      	subs	r3, #1
 800077c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000780:	d301      	bcc.n	8000786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000782:	2301      	movs	r3, #1
 8000784:	e00f      	b.n	80007a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000786:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <SysTick_Config+0x40>)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3b01      	subs	r3, #1
 800078c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800078e:	210f      	movs	r1, #15
 8000790:	f04f 30ff 	mov.w	r0, #4294967295
 8000794:	f7ff ff90 	bl	80006b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <SysTick_Config+0x40>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800079e:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <SysTick_Config+0x40>)
 80007a0:	2207      	movs	r2, #7
 80007a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	e000e010 	.word	0xe000e010

080007b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff ff49 	bl	8000654 <__NVIC_SetPriorityGrouping>
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b086      	sub	sp, #24
 80007ce:	af00      	add	r7, sp, #0
 80007d0:	4603      	mov	r3, r0
 80007d2:	60b9      	str	r1, [r7, #8]
 80007d4:	607a      	str	r2, [r7, #4]
 80007d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007dc:	f7ff ff5e 	bl	800069c <__NVIC_GetPriorityGrouping>
 80007e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	68b9      	ldr	r1, [r7, #8]
 80007e6:	6978      	ldr	r0, [r7, #20]
 80007e8:	f7ff ff90 	bl	800070c <NVIC_EncodePriority>
 80007ec:	4602      	mov	r2, r0
 80007ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f2:	4611      	mov	r1, r2
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff ff5f 	bl	80006b8 <__NVIC_SetPriority>
}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b082      	sub	sp, #8
 8000806:	af00      	add	r7, sp, #0
 8000808:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f7ff ffb0 	bl	8000770 <SysTick_Config>
 8000810:	4603      	mov	r3, r0
}
 8000812:	4618      	mov	r0, r3
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
	...

0800081c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800081c:	b480      	push	{r7}
 800081e:	b08b      	sub	sp, #44	; 0x2c
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800082a:	2300      	movs	r3, #0
 800082c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800082e:	e169      	b.n	8000b04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000830:	2201      	movs	r2, #1
 8000832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000834:	fa02 f303 	lsl.w	r3, r2, r3
 8000838:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	69fa      	ldr	r2, [r7, #28]
 8000840:	4013      	ands	r3, r2
 8000842:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000844:	69ba      	ldr	r2, [r7, #24]
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	429a      	cmp	r2, r3
 800084a:	f040 8158 	bne.w	8000afe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	4a9a      	ldr	r2, [pc, #616]	; (8000abc <HAL_GPIO_Init+0x2a0>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d05e      	beq.n	8000916 <HAL_GPIO_Init+0xfa>
 8000858:	4a98      	ldr	r2, [pc, #608]	; (8000abc <HAL_GPIO_Init+0x2a0>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d875      	bhi.n	800094a <HAL_GPIO_Init+0x12e>
 800085e:	4a98      	ldr	r2, [pc, #608]	; (8000ac0 <HAL_GPIO_Init+0x2a4>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d058      	beq.n	8000916 <HAL_GPIO_Init+0xfa>
 8000864:	4a96      	ldr	r2, [pc, #600]	; (8000ac0 <HAL_GPIO_Init+0x2a4>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d86f      	bhi.n	800094a <HAL_GPIO_Init+0x12e>
 800086a:	4a96      	ldr	r2, [pc, #600]	; (8000ac4 <HAL_GPIO_Init+0x2a8>)
 800086c:	4293      	cmp	r3, r2
 800086e:	d052      	beq.n	8000916 <HAL_GPIO_Init+0xfa>
 8000870:	4a94      	ldr	r2, [pc, #592]	; (8000ac4 <HAL_GPIO_Init+0x2a8>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d869      	bhi.n	800094a <HAL_GPIO_Init+0x12e>
 8000876:	4a94      	ldr	r2, [pc, #592]	; (8000ac8 <HAL_GPIO_Init+0x2ac>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d04c      	beq.n	8000916 <HAL_GPIO_Init+0xfa>
 800087c:	4a92      	ldr	r2, [pc, #584]	; (8000ac8 <HAL_GPIO_Init+0x2ac>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d863      	bhi.n	800094a <HAL_GPIO_Init+0x12e>
 8000882:	4a92      	ldr	r2, [pc, #584]	; (8000acc <HAL_GPIO_Init+0x2b0>)
 8000884:	4293      	cmp	r3, r2
 8000886:	d046      	beq.n	8000916 <HAL_GPIO_Init+0xfa>
 8000888:	4a90      	ldr	r2, [pc, #576]	; (8000acc <HAL_GPIO_Init+0x2b0>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d85d      	bhi.n	800094a <HAL_GPIO_Init+0x12e>
 800088e:	2b12      	cmp	r3, #18
 8000890:	d82a      	bhi.n	80008e8 <HAL_GPIO_Init+0xcc>
 8000892:	2b12      	cmp	r3, #18
 8000894:	d859      	bhi.n	800094a <HAL_GPIO_Init+0x12e>
 8000896:	a201      	add	r2, pc, #4	; (adr r2, 800089c <HAL_GPIO_Init+0x80>)
 8000898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800089c:	08000917 	.word	0x08000917
 80008a0:	080008f1 	.word	0x080008f1
 80008a4:	08000903 	.word	0x08000903
 80008a8:	08000945 	.word	0x08000945
 80008ac:	0800094b 	.word	0x0800094b
 80008b0:	0800094b 	.word	0x0800094b
 80008b4:	0800094b 	.word	0x0800094b
 80008b8:	0800094b 	.word	0x0800094b
 80008bc:	0800094b 	.word	0x0800094b
 80008c0:	0800094b 	.word	0x0800094b
 80008c4:	0800094b 	.word	0x0800094b
 80008c8:	0800094b 	.word	0x0800094b
 80008cc:	0800094b 	.word	0x0800094b
 80008d0:	0800094b 	.word	0x0800094b
 80008d4:	0800094b 	.word	0x0800094b
 80008d8:	0800094b 	.word	0x0800094b
 80008dc:	0800094b 	.word	0x0800094b
 80008e0:	080008f9 	.word	0x080008f9
 80008e4:	0800090d 	.word	0x0800090d
 80008e8:	4a79      	ldr	r2, [pc, #484]	; (8000ad0 <HAL_GPIO_Init+0x2b4>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d013      	beq.n	8000916 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80008ee:	e02c      	b.n	800094a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	623b      	str	r3, [r7, #32]
          break;
 80008f6:	e029      	b.n	800094c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	3304      	adds	r3, #4
 80008fe:	623b      	str	r3, [r7, #32]
          break;
 8000900:	e024      	b.n	800094c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	68db      	ldr	r3, [r3, #12]
 8000906:	3308      	adds	r3, #8
 8000908:	623b      	str	r3, [r7, #32]
          break;
 800090a:	e01f      	b.n	800094c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	330c      	adds	r3, #12
 8000912:	623b      	str	r3, [r7, #32]
          break;
 8000914:	e01a      	b.n	800094c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d102      	bne.n	8000924 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800091e:	2304      	movs	r3, #4
 8000920:	623b      	str	r3, [r7, #32]
          break;
 8000922:	e013      	b.n	800094c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	689b      	ldr	r3, [r3, #8]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d105      	bne.n	8000938 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800092c:	2308      	movs	r3, #8
 800092e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	69fa      	ldr	r2, [r7, #28]
 8000934:	611a      	str	r2, [r3, #16]
          break;
 8000936:	e009      	b.n	800094c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000938:	2308      	movs	r3, #8
 800093a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	69fa      	ldr	r2, [r7, #28]
 8000940:	615a      	str	r2, [r3, #20]
          break;
 8000942:	e003      	b.n	800094c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
          break;
 8000948:	e000      	b.n	800094c <HAL_GPIO_Init+0x130>
          break;
 800094a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	2bff      	cmp	r3, #255	; 0xff
 8000950:	d801      	bhi.n	8000956 <HAL_GPIO_Init+0x13a>
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	e001      	b.n	800095a <HAL_GPIO_Init+0x13e>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	3304      	adds	r3, #4
 800095a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800095c:	69bb      	ldr	r3, [r7, #24]
 800095e:	2bff      	cmp	r3, #255	; 0xff
 8000960:	d802      	bhi.n	8000968 <HAL_GPIO_Init+0x14c>
 8000962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	e002      	b.n	800096e <HAL_GPIO_Init+0x152>
 8000968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096a:	3b08      	subs	r3, #8
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	210f      	movs	r1, #15
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	fa01 f303 	lsl.w	r3, r1, r3
 800097c:	43db      	mvns	r3, r3
 800097e:	401a      	ands	r2, r3
 8000980:	6a39      	ldr	r1, [r7, #32]
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	fa01 f303 	lsl.w	r3, r1, r3
 8000988:	431a      	orrs	r2, r3
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685b      	ldr	r3, [r3, #4]
 8000992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000996:	2b00      	cmp	r3, #0
 8000998:	f000 80b1 	beq.w	8000afe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800099c:	4b4d      	ldr	r3, [pc, #308]	; (8000ad4 <HAL_GPIO_Init+0x2b8>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	4a4c      	ldr	r2, [pc, #304]	; (8000ad4 <HAL_GPIO_Init+0x2b8>)
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	6193      	str	r3, [r2, #24]
 80009a8:	4b4a      	ldr	r3, [pc, #296]	; (8000ad4 <HAL_GPIO_Init+0x2b8>)
 80009aa:	699b      	ldr	r3, [r3, #24]
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009b4:	4a48      	ldr	r2, [pc, #288]	; (8000ad8 <HAL_GPIO_Init+0x2bc>)
 80009b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b8:	089b      	lsrs	r3, r3, #2
 80009ba:	3302      	adds	r3, #2
 80009bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c4:	f003 0303 	and.w	r3, r3, #3
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	220f      	movs	r2, #15
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	43db      	mvns	r3, r3
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	4013      	ands	r3, r2
 80009d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a40      	ldr	r2, [pc, #256]	; (8000adc <HAL_GPIO_Init+0x2c0>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d013      	beq.n	8000a08 <HAL_GPIO_Init+0x1ec>
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a3f      	ldr	r2, [pc, #252]	; (8000ae0 <HAL_GPIO_Init+0x2c4>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d00d      	beq.n	8000a04 <HAL_GPIO_Init+0x1e8>
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	4a3e      	ldr	r2, [pc, #248]	; (8000ae4 <HAL_GPIO_Init+0x2c8>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d007      	beq.n	8000a00 <HAL_GPIO_Init+0x1e4>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a3d      	ldr	r2, [pc, #244]	; (8000ae8 <HAL_GPIO_Init+0x2cc>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d101      	bne.n	80009fc <HAL_GPIO_Init+0x1e0>
 80009f8:	2303      	movs	r3, #3
 80009fa:	e006      	b.n	8000a0a <HAL_GPIO_Init+0x1ee>
 80009fc:	2304      	movs	r3, #4
 80009fe:	e004      	b.n	8000a0a <HAL_GPIO_Init+0x1ee>
 8000a00:	2302      	movs	r3, #2
 8000a02:	e002      	b.n	8000a0a <HAL_GPIO_Init+0x1ee>
 8000a04:	2301      	movs	r3, #1
 8000a06:	e000      	b.n	8000a0a <HAL_GPIO_Init+0x1ee>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a0c:	f002 0203 	and.w	r2, r2, #3
 8000a10:	0092      	lsls	r2, r2, #2
 8000a12:	4093      	lsls	r3, r2
 8000a14:	68fa      	ldr	r2, [r7, #12]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a1a:	492f      	ldr	r1, [pc, #188]	; (8000ad8 <HAL_GPIO_Init+0x2bc>)
 8000a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1e:	089b      	lsrs	r3, r3, #2
 8000a20:	3302      	adds	r3, #2
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d006      	beq.n	8000a42 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a34:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	492c      	ldr	r1, [pc, #176]	; (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a3a:	69bb      	ldr	r3, [r7, #24]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	600b      	str	r3, [r1, #0]
 8000a40:	e006      	b.n	8000a50 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a42:	4b2a      	ldr	r3, [pc, #168]	; (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a44:	681a      	ldr	r2, [r3, #0]
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	43db      	mvns	r3, r3
 8000a4a:	4928      	ldr	r1, [pc, #160]	; (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d006      	beq.n	8000a6a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a5c:	4b23      	ldr	r3, [pc, #140]	; (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a5e:	685a      	ldr	r2, [r3, #4]
 8000a60:	4922      	ldr	r1, [pc, #136]	; (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a62:	69bb      	ldr	r3, [r7, #24]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	604b      	str	r3, [r1, #4]
 8000a68:	e006      	b.n	8000a78 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a6a:	4b20      	ldr	r3, [pc, #128]	; (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	69bb      	ldr	r3, [r7, #24]
 8000a70:	43db      	mvns	r3, r3
 8000a72:	491e      	ldr	r1, [pc, #120]	; (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a74:	4013      	ands	r3, r2
 8000a76:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d006      	beq.n	8000a92 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a84:	4b19      	ldr	r3, [pc, #100]	; (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a86:	689a      	ldr	r2, [r3, #8]
 8000a88:	4918      	ldr	r1, [pc, #96]	; (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	608b      	str	r3, [r1, #8]
 8000a90:	e006      	b.n	8000aa0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a92:	4b16      	ldr	r3, [pc, #88]	; (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a94:	689a      	ldr	r2, [r3, #8]
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	4914      	ldr	r1, [pc, #80]	; (8000aec <HAL_GPIO_Init+0x2d0>)
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d021      	beq.n	8000af0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <HAL_GPIO_Init+0x2d0>)
 8000aae:	68da      	ldr	r2, [r3, #12]
 8000ab0:	490e      	ldr	r1, [pc, #56]	; (8000aec <HAL_GPIO_Init+0x2d0>)
 8000ab2:	69bb      	ldr	r3, [r7, #24]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	60cb      	str	r3, [r1, #12]
 8000ab8:	e021      	b.n	8000afe <HAL_GPIO_Init+0x2e2>
 8000aba:	bf00      	nop
 8000abc:	10320000 	.word	0x10320000
 8000ac0:	10310000 	.word	0x10310000
 8000ac4:	10220000 	.word	0x10220000
 8000ac8:	10210000 	.word	0x10210000
 8000acc:	10120000 	.word	0x10120000
 8000ad0:	10110000 	.word	0x10110000
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	40010000 	.word	0x40010000
 8000adc:	40010800 	.word	0x40010800
 8000ae0:	40010c00 	.word	0x40010c00
 8000ae4:	40011000 	.word	0x40011000
 8000ae8:	40011400 	.word	0x40011400
 8000aec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000af0:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <HAL_GPIO_Init+0x304>)
 8000af2:	68da      	ldr	r2, [r3, #12]
 8000af4:	69bb      	ldr	r3, [r7, #24]
 8000af6:	43db      	mvns	r3, r3
 8000af8:	4909      	ldr	r1, [pc, #36]	; (8000b20 <HAL_GPIO_Init+0x304>)
 8000afa:	4013      	ands	r3, r2
 8000afc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	3301      	adds	r3, #1
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f47f ae8e 	bne.w	8000830 <HAL_GPIO_Init+0x14>
  }
}
 8000b14:	bf00      	nop
 8000b16:	bf00      	nop
 8000b18:	372c      	adds	r7, #44	; 0x2c
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	40010400 	.word	0x40010400

08000b24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	807b      	strh	r3, [r7, #2]
 8000b30:	4613      	mov	r3, r2
 8000b32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b34:	787b      	ldrb	r3, [r7, #1]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d003      	beq.n	8000b42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b3a:	887a      	ldrh	r2, [r7, #2]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b40:	e003      	b.n	8000b4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b42:	887b      	ldrh	r3, [r7, #2]
 8000b44:	041a      	lsls	r2, r3, #16
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	611a      	str	r2, [r3, #16]
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr

08000b54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d101      	bne.n	8000b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e272      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f000 8087 	beq.w	8000c82 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b74:	4b92      	ldr	r3, [pc, #584]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f003 030c 	and.w	r3, r3, #12
 8000b7c:	2b04      	cmp	r3, #4
 8000b7e:	d00c      	beq.n	8000b9a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b80:	4b8f      	ldr	r3, [pc, #572]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f003 030c 	and.w	r3, r3, #12
 8000b88:	2b08      	cmp	r3, #8
 8000b8a:	d112      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x5e>
 8000b8c:	4b8c      	ldr	r3, [pc, #560]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b98:	d10b      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b9a:	4b89      	ldr	r3, [pc, #548]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d06c      	beq.n	8000c80 <HAL_RCC_OscConfig+0x12c>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d168      	bne.n	8000c80 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e24c      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bba:	d106      	bne.n	8000bca <HAL_RCC_OscConfig+0x76>
 8000bbc:	4b80      	ldr	r3, [pc, #512]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a7f      	ldr	r2, [pc, #508]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000bc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	e02e      	b.n	8000c28 <HAL_RCC_OscConfig+0xd4>
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d10c      	bne.n	8000bec <HAL_RCC_OscConfig+0x98>
 8000bd2:	4b7b      	ldr	r3, [pc, #492]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a7a      	ldr	r2, [pc, #488]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bdc:	6013      	str	r3, [r2, #0]
 8000bde:	4b78      	ldr	r3, [pc, #480]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a77      	ldr	r2, [pc, #476]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000be4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000be8:	6013      	str	r3, [r2, #0]
 8000bea:	e01d      	b.n	8000c28 <HAL_RCC_OscConfig+0xd4>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bf4:	d10c      	bne.n	8000c10 <HAL_RCC_OscConfig+0xbc>
 8000bf6:	4b72      	ldr	r3, [pc, #456]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a71      	ldr	r2, [pc, #452]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c00:	6013      	str	r3, [r2, #0]
 8000c02:	4b6f      	ldr	r3, [pc, #444]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a6e      	ldr	r2, [pc, #440]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c0c:	6013      	str	r3, [r2, #0]
 8000c0e:	e00b      	b.n	8000c28 <HAL_RCC_OscConfig+0xd4>
 8000c10:	4b6b      	ldr	r3, [pc, #428]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a6a      	ldr	r2, [pc, #424]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c1a:	6013      	str	r3, [r2, #0]
 8000c1c:	4b68      	ldr	r3, [pc, #416]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a67      	ldr	r2, [pc, #412]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c26:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d013      	beq.n	8000c58 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c30:	f7ff fd06 	bl	8000640 <HAL_GetTick>
 8000c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c36:	e008      	b.n	8000c4a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c38:	f7ff fd02 	bl	8000640 <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	2b64      	cmp	r3, #100	; 0x64
 8000c44:	d901      	bls.n	8000c4a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c46:	2303      	movs	r3, #3
 8000c48:	e200      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c4a:	4b5d      	ldr	r3, [pc, #372]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d0f0      	beq.n	8000c38 <HAL_RCC_OscConfig+0xe4>
 8000c56:	e014      	b.n	8000c82 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c58:	f7ff fcf2 	bl	8000640 <HAL_GetTick>
 8000c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c5e:	e008      	b.n	8000c72 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c60:	f7ff fcee 	bl	8000640 <HAL_GetTick>
 8000c64:	4602      	mov	r2, r0
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	2b64      	cmp	r3, #100	; 0x64
 8000c6c:	d901      	bls.n	8000c72 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	e1ec      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c72:	4b53      	ldr	r3, [pc, #332]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d1f0      	bne.n	8000c60 <HAL_RCC_OscConfig+0x10c>
 8000c7e:	e000      	b.n	8000c82 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f003 0302 	and.w	r3, r3, #2
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d063      	beq.n	8000d56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c8e:	4b4c      	ldr	r3, [pc, #304]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f003 030c 	and.w	r3, r3, #12
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d00b      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000c9a:	4b49      	ldr	r3, [pc, #292]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f003 030c 	and.w	r3, r3, #12
 8000ca2:	2b08      	cmp	r3, #8
 8000ca4:	d11c      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x18c>
 8000ca6:	4b46      	ldr	r3, [pc, #280]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d116      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cb2:	4b43      	ldr	r3, [pc, #268]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d005      	beq.n	8000cca <HAL_RCC_OscConfig+0x176>
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	691b      	ldr	r3, [r3, #16]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d001      	beq.n	8000cca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e1c0      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cca:	4b3d      	ldr	r3, [pc, #244]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	00db      	lsls	r3, r3, #3
 8000cd8:	4939      	ldr	r1, [pc, #228]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cde:	e03a      	b.n	8000d56 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	691b      	ldr	r3, [r3, #16]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d020      	beq.n	8000d2a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ce8:	4b36      	ldr	r3, [pc, #216]	; (8000dc4 <HAL_RCC_OscConfig+0x270>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cee:	f7ff fca7 	bl	8000640 <HAL_GetTick>
 8000cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf4:	e008      	b.n	8000d08 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cf6:	f7ff fca3 	bl	8000640 <HAL_GetTick>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d901      	bls.n	8000d08 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d04:	2303      	movs	r3, #3
 8000d06:	e1a1      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d08:	4b2d      	ldr	r3, [pc, #180]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d0f0      	beq.n	8000cf6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d14:	4b2a      	ldr	r3, [pc, #168]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	695b      	ldr	r3, [r3, #20]
 8000d20:	00db      	lsls	r3, r3, #3
 8000d22:	4927      	ldr	r1, [pc, #156]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	4313      	orrs	r3, r2
 8000d26:	600b      	str	r3, [r1, #0]
 8000d28:	e015      	b.n	8000d56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d2a:	4b26      	ldr	r3, [pc, #152]	; (8000dc4 <HAL_RCC_OscConfig+0x270>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d30:	f7ff fc86 	bl	8000640 <HAL_GetTick>
 8000d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d36:	e008      	b.n	8000d4a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d38:	f7ff fc82 	bl	8000640 <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d901      	bls.n	8000d4a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d46:	2303      	movs	r3, #3
 8000d48:	e180      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d4a:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1f0      	bne.n	8000d38 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f003 0308 	and.w	r3, r3, #8
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d03a      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d019      	beq.n	8000d9e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d6a:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <HAL_RCC_OscConfig+0x274>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d70:	f7ff fc66 	bl	8000640 <HAL_GetTick>
 8000d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d76:	e008      	b.n	8000d8a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d78:	f7ff fc62 	bl	8000640 <HAL_GetTick>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	693b      	ldr	r3, [r7, #16]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d901      	bls.n	8000d8a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000d86:	2303      	movs	r3, #3
 8000d88:	e160      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d0f0      	beq.n	8000d78 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000d96:	2001      	movs	r0, #1
 8000d98:	f000 fa78 	bl	800128c <RCC_Delay>
 8000d9c:	e01c      	b.n	8000dd8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <HAL_RCC_OscConfig+0x274>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000da4:	f7ff fc4c 	bl	8000640 <HAL_GetTick>
 8000da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000daa:	e00f      	b.n	8000dcc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dac:	f7ff fc48 	bl	8000640 <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d908      	bls.n	8000dcc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e146      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
 8000dbe:	bf00      	nop
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	42420000 	.word	0x42420000
 8000dc8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dcc:	4b92      	ldr	r3, [pc, #584]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd0:	f003 0302 	and.w	r3, r3, #2
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1e9      	bne.n	8000dac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	f000 80a6 	beq.w	8000f32 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000de6:	2300      	movs	r3, #0
 8000de8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dea:	4b8b      	ldr	r3, [pc, #556]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d10d      	bne.n	8000e12 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	4b88      	ldr	r3, [pc, #544]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	4a87      	ldr	r2, [pc, #540]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e00:	61d3      	str	r3, [r2, #28]
 8000e02:	4b85      	ldr	r3, [pc, #532]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e12:	4b82      	ldr	r3, [pc, #520]	; (800101c <HAL_RCC_OscConfig+0x4c8>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d118      	bne.n	8000e50 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e1e:	4b7f      	ldr	r3, [pc, #508]	; (800101c <HAL_RCC_OscConfig+0x4c8>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a7e      	ldr	r2, [pc, #504]	; (800101c <HAL_RCC_OscConfig+0x4c8>)
 8000e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e2a:	f7ff fc09 	bl	8000640 <HAL_GetTick>
 8000e2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e30:	e008      	b.n	8000e44 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e32:	f7ff fc05 	bl	8000640 <HAL_GetTick>
 8000e36:	4602      	mov	r2, r0
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	2b64      	cmp	r3, #100	; 0x64
 8000e3e:	d901      	bls.n	8000e44 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e40:	2303      	movs	r3, #3
 8000e42:	e103      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e44:	4b75      	ldr	r3, [pc, #468]	; (800101c <HAL_RCC_OscConfig+0x4c8>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d0f0      	beq.n	8000e32 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d106      	bne.n	8000e66 <HAL_RCC_OscConfig+0x312>
 8000e58:	4b6f      	ldr	r3, [pc, #444]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000e5a:	6a1b      	ldr	r3, [r3, #32]
 8000e5c:	4a6e      	ldr	r2, [pc, #440]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	6213      	str	r3, [r2, #32]
 8000e64:	e02d      	b.n	8000ec2 <HAL_RCC_OscConfig+0x36e>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d10c      	bne.n	8000e88 <HAL_RCC_OscConfig+0x334>
 8000e6e:	4b6a      	ldr	r3, [pc, #424]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000e70:	6a1b      	ldr	r3, [r3, #32]
 8000e72:	4a69      	ldr	r2, [pc, #420]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000e74:	f023 0301 	bic.w	r3, r3, #1
 8000e78:	6213      	str	r3, [r2, #32]
 8000e7a:	4b67      	ldr	r3, [pc, #412]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000e7c:	6a1b      	ldr	r3, [r3, #32]
 8000e7e:	4a66      	ldr	r2, [pc, #408]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000e80:	f023 0304 	bic.w	r3, r3, #4
 8000e84:	6213      	str	r3, [r2, #32]
 8000e86:	e01c      	b.n	8000ec2 <HAL_RCC_OscConfig+0x36e>
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	2b05      	cmp	r3, #5
 8000e8e:	d10c      	bne.n	8000eaa <HAL_RCC_OscConfig+0x356>
 8000e90:	4b61      	ldr	r3, [pc, #388]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000e92:	6a1b      	ldr	r3, [r3, #32]
 8000e94:	4a60      	ldr	r2, [pc, #384]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000e96:	f043 0304 	orr.w	r3, r3, #4
 8000e9a:	6213      	str	r3, [r2, #32]
 8000e9c:	4b5e      	ldr	r3, [pc, #376]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000e9e:	6a1b      	ldr	r3, [r3, #32]
 8000ea0:	4a5d      	ldr	r2, [pc, #372]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	6213      	str	r3, [r2, #32]
 8000ea8:	e00b      	b.n	8000ec2 <HAL_RCC_OscConfig+0x36e>
 8000eaa:	4b5b      	ldr	r3, [pc, #364]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000eac:	6a1b      	ldr	r3, [r3, #32]
 8000eae:	4a5a      	ldr	r2, [pc, #360]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000eb0:	f023 0301 	bic.w	r3, r3, #1
 8000eb4:	6213      	str	r3, [r2, #32]
 8000eb6:	4b58      	ldr	r3, [pc, #352]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000eb8:	6a1b      	ldr	r3, [r3, #32]
 8000eba:	4a57      	ldr	r2, [pc, #348]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000ebc:	f023 0304 	bic.w	r3, r3, #4
 8000ec0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d015      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eca:	f7ff fbb9 	bl	8000640 <HAL_GetTick>
 8000ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ed0:	e00a      	b.n	8000ee8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ed2:	f7ff fbb5 	bl	8000640 <HAL_GetTick>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d901      	bls.n	8000ee8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e0b1      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ee8:	4b4b      	ldr	r3, [pc, #300]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d0ee      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x37e>
 8000ef4:	e014      	b.n	8000f20 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef6:	f7ff fba3 	bl	8000640 <HAL_GetTick>
 8000efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000efc:	e00a      	b.n	8000f14 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000efe:	f7ff fb9f 	bl	8000640 <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d901      	bls.n	8000f14 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f10:	2303      	movs	r3, #3
 8000f12:	e09b      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f14:	4b40      	ldr	r3, [pc, #256]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000f16:	6a1b      	ldr	r3, [r3, #32]
 8000f18:	f003 0302 	and.w	r3, r3, #2
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d1ee      	bne.n	8000efe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f20:	7dfb      	ldrb	r3, [r7, #23]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d105      	bne.n	8000f32 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f26:	4b3c      	ldr	r3, [pc, #240]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	4a3b      	ldr	r2, [pc, #236]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f30:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f000 8087 	beq.w	800104a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f3c:	4b36      	ldr	r3, [pc, #216]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f003 030c 	and.w	r3, r3, #12
 8000f44:	2b08      	cmp	r3, #8
 8000f46:	d061      	beq.n	800100c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	69db      	ldr	r3, [r3, #28]
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d146      	bne.n	8000fde <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f50:	4b33      	ldr	r3, [pc, #204]	; (8001020 <HAL_RCC_OscConfig+0x4cc>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f56:	f7ff fb73 	bl	8000640 <HAL_GetTick>
 8000f5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f5c:	e008      	b.n	8000f70 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f5e:	f7ff fb6f 	bl	8000640 <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d901      	bls.n	8000f70 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e06d      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f70:	4b29      	ldr	r3, [pc, #164]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d1f0      	bne.n	8000f5e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a1b      	ldr	r3, [r3, #32]
 8000f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f84:	d108      	bne.n	8000f98 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f86:	4b24      	ldr	r3, [pc, #144]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f8a:	f023 020f 	bic.w	r2, r3, #15
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	4921      	ldr	r1, [pc, #132]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000f94:	4313      	orrs	r3, r2
 8000f96:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f98:	4b1f      	ldr	r3, [pc, #124]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a19      	ldr	r1, [r3, #32]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa8:	430b      	orrs	r3, r1
 8000faa:	491b      	ldr	r1, [pc, #108]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000fac:	4313      	orrs	r3, r2
 8000fae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <HAL_RCC_OscConfig+0x4cc>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb6:	f7ff fb43 	bl	8000640 <HAL_GetTick>
 8000fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fbc:	e008      	b.n	8000fd0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fbe:	f7ff fb3f 	bl	8000640 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d901      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e03d      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0f0      	beq.n	8000fbe <HAL_RCC_OscConfig+0x46a>
 8000fdc:	e035      	b.n	800104a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <HAL_RCC_OscConfig+0x4cc>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe4:	f7ff fb2c 	bl	8000640 <HAL_GetTick>
 8000fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fec:	f7ff fb28 	bl	8000640 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e026      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_RCC_OscConfig+0x4c4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1f0      	bne.n	8000fec <HAL_RCC_OscConfig+0x498>
 800100a:	e01e      	b.n	800104a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	69db      	ldr	r3, [r3, #28]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d107      	bne.n	8001024 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e019      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
 8001018:	40021000 	.word	0x40021000
 800101c:	40007000 	.word	0x40007000
 8001020:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <HAL_RCC_OscConfig+0x500>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	429a      	cmp	r2, r3
 8001036:	d106      	bne.n	8001046 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001042:	429a      	cmp	r2, r3
 8001044:	d001      	beq.n	800104a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800104a:	2300      	movs	r3, #0
}
 800104c:	4618      	mov	r0, r3
 800104e:	3718      	adds	r7, #24
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40021000 	.word	0x40021000

08001058 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d101      	bne.n	800106c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e0a0      	b.n	80011ae <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d020      	beq.n	80010ba <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0304 	and.w	r3, r3, #4
 8001080:	2b00      	cmp	r3, #0
 8001082:	d005      	beq.n	8001090 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001084:	4b4c      	ldr	r3, [pc, #304]	; (80011b8 <HAL_RCC_ClockConfig+0x160>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	4a4b      	ldr	r2, [pc, #300]	; (80011b8 <HAL_RCC_ClockConfig+0x160>)
 800108a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800108e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f003 0308 	and.w	r3, r3, #8
 8001098:	2b00      	cmp	r3, #0
 800109a:	d005      	beq.n	80010a8 <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800109c:	4b46      	ldr	r3, [pc, #280]	; (80011b8 <HAL_RCC_ClockConfig+0x160>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	4a45      	ldr	r2, [pc, #276]	; (80011b8 <HAL_RCC_ClockConfig+0x160>)
 80010a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80010a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010a8:	4b43      	ldr	r3, [pc, #268]	; (80011b8 <HAL_RCC_ClockConfig+0x160>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	4940      	ldr	r1, [pc, #256]	; (80011b8 <HAL_RCC_ClockConfig+0x160>)
 80010b6:	4313      	orrs	r3, r2
 80010b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d040      	beq.n	8001148 <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d107      	bne.n	80010de <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ce:	4b3a      	ldr	r3, [pc, #232]	; (80011b8 <HAL_RCC_ClockConfig+0x160>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d115      	bne.n	8001106 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e067      	b.n	80011ae <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b02      	cmp	r3, #2
 80010e4:	d107      	bne.n	80010f6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010e6:	4b34      	ldr	r3, [pc, #208]	; (80011b8 <HAL_RCC_ClockConfig+0x160>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d109      	bne.n	8001106 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e05b      	b.n	80011ae <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f6:	4b30      	ldr	r3, [pc, #192]	; (80011b8 <HAL_RCC_ClockConfig+0x160>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e053      	b.n	80011ae <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001106:	4b2c      	ldr	r3, [pc, #176]	; (80011b8 <HAL_RCC_ClockConfig+0x160>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f023 0203 	bic.w	r2, r3, #3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	4929      	ldr	r1, [pc, #164]	; (80011b8 <HAL_RCC_ClockConfig+0x160>)
 8001114:	4313      	orrs	r3, r2
 8001116:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001118:	f7ff fa92 	bl	8000640 <HAL_GetTick>
 800111c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800111e:	e00a      	b.n	8001136 <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001120:	f7ff fa8e 	bl	8000640 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	f241 3288 	movw	r2, #5000	; 0x1388
 800112e:	4293      	cmp	r3, r2
 8001130:	d901      	bls.n	8001136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e03b      	b.n	80011ae <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001136:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <HAL_RCC_ClockConfig+0x160>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f003 020c 	and.w	r2, r3, #12
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	429a      	cmp	r2, r3
 8001146:	d1eb      	bne.n	8001120 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0304 	and.w	r3, r3, #4
 8001150:	2b00      	cmp	r3, #0
 8001152:	d008      	beq.n	8001166 <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001154:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <HAL_RCC_ClockConfig+0x160>)
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	4915      	ldr	r1, [pc, #84]	; (80011b8 <HAL_RCC_ClockConfig+0x160>)
 8001162:	4313      	orrs	r3, r2
 8001164:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	2b00      	cmp	r3, #0
 8001170:	d009      	beq.n	8001186 <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <HAL_RCC_ClockConfig+0x160>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	490d      	ldr	r1, [pc, #52]	; (80011b8 <HAL_RCC_ClockConfig+0x160>)
 8001182:	4313      	orrs	r3, r2
 8001184:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001186:	f000 f81f 	bl	80011c8 <HAL_RCC_GetSysClockFreq>
 800118a:	4602      	mov	r2, r0
 800118c:	4b0a      	ldr	r3, [pc, #40]	; (80011b8 <HAL_RCC_ClockConfig+0x160>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	091b      	lsrs	r3, r3, #4
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	4909      	ldr	r1, [pc, #36]	; (80011bc <HAL_RCC_ClockConfig+0x164>)
 8001198:	5ccb      	ldrb	r3, [r1, r3]
 800119a:	fa22 f303 	lsr.w	r3, r2, r3
 800119e:	4a08      	ldr	r2, [pc, #32]	; (80011c0 <HAL_RCC_ClockConfig+0x168>)
 80011a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80011a2:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_RCC_ClockConfig+0x16c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fa08 	bl	80005bc <HAL_InitTick>

  return HAL_OK;
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40021000 	.word	0x40021000
 80011bc:	0800191c 	.word	0x0800191c
 80011c0:	20000000 	.word	0x20000000
 80011c4:	20000004 	.word	0x20000004

080011c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011c8:	b490      	push	{r4, r7}
 80011ca:	b08e      	sub	sp, #56	; 0x38
 80011cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80011ce:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <HAL_RCC_GetSysClockFreq+0xb0>)
 80011d0:	f107 0414 	add.w	r4, r7, #20
 80011d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80011da:	4b28      	ldr	r3, [pc, #160]	; (800127c <HAL_RCC_GetSysClockFreq+0xb4>)
 80011dc:	1d3c      	adds	r4, r7, #4
 80011de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011e8:	2300      	movs	r3, #0
 80011ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80011ec:	2300      	movs	r3, #0
 80011ee:	637b      	str	r3, [r7, #52]	; 0x34
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80011f8:	4b21      	ldr	r3, [pc, #132]	; (8001280 <HAL_RCC_GetSysClockFreq+0xb8>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80011fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001200:	f003 030c 	and.w	r3, r3, #12
 8001204:	2b04      	cmp	r3, #4
 8001206:	d002      	beq.n	800120e <HAL_RCC_GetSysClockFreq+0x46>
 8001208:	2b08      	cmp	r3, #8
 800120a:	d003      	beq.n	8001214 <HAL_RCC_GetSysClockFreq+0x4c>
 800120c:	e02a      	b.n	8001264 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800120e:	4b1d      	ldr	r3, [pc, #116]	; (8001284 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001210:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001212:	e02a      	b.n	800126a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001216:	0c9b      	lsrs	r3, r3, #18
 8001218:	f003 030f 	and.w	r3, r3, #15
 800121c:	3338      	adds	r3, #56	; 0x38
 800121e:	443b      	add	r3, r7
 8001220:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d011      	beq.n	8001254 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001230:	4b13      	ldr	r3, [pc, #76]	; (8001280 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001234:	f003 030f 	and.w	r3, r3, #15
 8001238:	3338      	adds	r3, #56	; 0x38
 800123a:	443b      	add	r3, r7
 800123c:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8001240:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001244:	4a0f      	ldr	r2, [pc, #60]	; (8001284 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001246:	fb03 f202 	mul.w	r2, r3, r2
 800124a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001250:	637b      	str	r3, [r7, #52]	; 0x34
 8001252:	e004      	b.n	800125e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001256:	4a0c      	ldr	r2, [pc, #48]	; (8001288 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001258:	fb02 f303 	mul.w	r3, r2, r3
 800125c:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 800125e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001260:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001262:	e002      	b.n	800126a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001266:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001268:	bf00      	nop
    }
  }
  return sysclockfreq;
 800126a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800126c:	4618      	mov	r0, r3
 800126e:	3738      	adds	r7, #56	; 0x38
 8001270:	46bd      	mov	sp, r7
 8001272:	bc90      	pop	{r4, r7}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	080018fc 	.word	0x080018fc
 800127c:	0800190c 	.word	0x0800190c
 8001280:	40021000 	.word	0x40021000
 8001284:	007a1200 	.word	0x007a1200
 8001288:	003d0900 	.word	0x003d0900

0800128c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001294:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <RCC_Delay+0x34>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <RCC_Delay+0x38>)
 800129a:	fba2 2303 	umull	r2, r3, r2, r3
 800129e:	0a5b      	lsrs	r3, r3, #9
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	fb02 f303 	mul.w	r3, r2, r3
 80012a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80012a8:	bf00      	nop
  }
  while (Delay --);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	1e5a      	subs	r2, r3, #1
 80012ae:	60fa      	str	r2, [r7, #12]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d1f9      	bne.n	80012a8 <RCC_Delay+0x1c>
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	20000000 	.word	0x20000000
 80012c4:	10624dd3 	.word	0x10624dd3

080012c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e041      	b.n	800135e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d106      	bne.n	80012f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff f8e6 	bl	80004c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2202      	movs	r2, #2
 80012f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	3304      	adds	r3, #4
 8001304:	4619      	mov	r1, r3
 8001306:	4610      	mov	r0, r2
 8001308:	f000 f944 	bl	8001594 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2201      	movs	r2, #1
 8001310:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2201      	movs	r2, #1
 8001328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2201      	movs	r2, #1
 8001330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2201      	movs	r2, #1
 8001338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2201      	movs	r2, #1
 8001340:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2201      	movs	r2, #1
 8001348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2201      	movs	r2, #1
 8001358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b01      	cmp	r3, #1
 800137a:	d001      	beq.n	8001380 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e037      	b.n	80013f0 <HAL_TIM_Base_Start+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2202      	movs	r2, #2
 8001384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a1b      	ldr	r2, [pc, #108]	; (80013fc <HAL_TIM_Base_Start+0x94>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d013      	beq.n	80013ba <HAL_TIM_Base_Start+0x52>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800139a:	d00e      	beq.n	80013ba <HAL_TIM_Base_Start+0x52>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a17      	ldr	r2, [pc, #92]	; (8001400 <HAL_TIM_Base_Start+0x98>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d009      	beq.n	80013ba <HAL_TIM_Base_Start+0x52>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a16      	ldr	r2, [pc, #88]	; (8001404 <HAL_TIM_Base_Start+0x9c>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d004      	beq.n	80013ba <HAL_TIM_Base_Start+0x52>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a14      	ldr	r2, [pc, #80]	; (8001408 <HAL_TIM_Base_Start+0xa0>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d111      	bne.n	80013de <HAL_TIM_Base_Start+0x76>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f003 0307 	and.w	r3, r3, #7
 80013c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	2b06      	cmp	r3, #6
 80013ca:	d010      	beq.n	80013ee <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f042 0201 	orr.w	r2, r2, #1
 80013da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80013dc:	e007      	b.n	80013ee <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f042 0201 	orr.w	r2, r2, #1
 80013ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40012c00 	.word	0x40012c00
 8001400:	40000400 	.word	0x40000400
 8001404:	40000800 	.word	0x40000800
 8001408:	40014000 	.word	0x40014000

0800140c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800141c:	2b01      	cmp	r3, #1
 800141e:	d101      	bne.n	8001424 <HAL_TIM_ConfigClockSource+0x18>
 8001420:	2302      	movs	r3, #2
 8001422:	e0b3      	b.n	800158c <HAL_TIM_ConfigClockSource+0x180>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2202      	movs	r2, #2
 8001430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001442:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800144a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800145c:	d03e      	beq.n	80014dc <HAL_TIM_ConfigClockSource+0xd0>
 800145e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001462:	f200 8087 	bhi.w	8001574 <HAL_TIM_ConfigClockSource+0x168>
 8001466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800146a:	f000 8085 	beq.w	8001578 <HAL_TIM_ConfigClockSource+0x16c>
 800146e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001472:	d87f      	bhi.n	8001574 <HAL_TIM_ConfigClockSource+0x168>
 8001474:	2b70      	cmp	r3, #112	; 0x70
 8001476:	d01a      	beq.n	80014ae <HAL_TIM_ConfigClockSource+0xa2>
 8001478:	2b70      	cmp	r3, #112	; 0x70
 800147a:	d87b      	bhi.n	8001574 <HAL_TIM_ConfigClockSource+0x168>
 800147c:	2b60      	cmp	r3, #96	; 0x60
 800147e:	d050      	beq.n	8001522 <HAL_TIM_ConfigClockSource+0x116>
 8001480:	2b60      	cmp	r3, #96	; 0x60
 8001482:	d877      	bhi.n	8001574 <HAL_TIM_ConfigClockSource+0x168>
 8001484:	2b50      	cmp	r3, #80	; 0x50
 8001486:	d03c      	beq.n	8001502 <HAL_TIM_ConfigClockSource+0xf6>
 8001488:	2b50      	cmp	r3, #80	; 0x50
 800148a:	d873      	bhi.n	8001574 <HAL_TIM_ConfigClockSource+0x168>
 800148c:	2b40      	cmp	r3, #64	; 0x40
 800148e:	d058      	beq.n	8001542 <HAL_TIM_ConfigClockSource+0x136>
 8001490:	2b40      	cmp	r3, #64	; 0x40
 8001492:	d86f      	bhi.n	8001574 <HAL_TIM_ConfigClockSource+0x168>
 8001494:	2b30      	cmp	r3, #48	; 0x30
 8001496:	d064      	beq.n	8001562 <HAL_TIM_ConfigClockSource+0x156>
 8001498:	2b30      	cmp	r3, #48	; 0x30
 800149a:	d86b      	bhi.n	8001574 <HAL_TIM_ConfigClockSource+0x168>
 800149c:	2b20      	cmp	r3, #32
 800149e:	d060      	beq.n	8001562 <HAL_TIM_ConfigClockSource+0x156>
 80014a0:	2b20      	cmp	r3, #32
 80014a2:	d867      	bhi.n	8001574 <HAL_TIM_ConfigClockSource+0x168>
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d05c      	beq.n	8001562 <HAL_TIM_ConfigClockSource+0x156>
 80014a8:	2b10      	cmp	r3, #16
 80014aa:	d05a      	beq.n	8001562 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80014ac:	e062      	b.n	8001574 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6818      	ldr	r0, [r3, #0]
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	6899      	ldr	r1, [r3, #8]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	f000 f960 	bl	8001782 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80014d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	609a      	str	r2, [r3, #8]
      break;
 80014da:	e04e      	b.n	800157a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6818      	ldr	r0, [r3, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	6899      	ldr	r1, [r3, #8]
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685a      	ldr	r2, [r3, #4]
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	f000 f949 	bl	8001782 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689a      	ldr	r2, [r3, #8]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014fe:	609a      	str	r2, [r3, #8]
      break;
 8001500:	e03b      	b.n	800157a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6818      	ldr	r0, [r3, #0]
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	6859      	ldr	r1, [r3, #4]
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	461a      	mov	r2, r3
 8001510:	f000 f8c0 	bl	8001694 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2150      	movs	r1, #80	; 0x50
 800151a:	4618      	mov	r0, r3
 800151c:	f000 f917 	bl	800174e <TIM_ITRx_SetConfig>
      break;
 8001520:	e02b      	b.n	800157a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6818      	ldr	r0, [r3, #0]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	6859      	ldr	r1, [r3, #4]
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	461a      	mov	r2, r3
 8001530:	f000 f8de 	bl	80016f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2160      	movs	r1, #96	; 0x60
 800153a:	4618      	mov	r0, r3
 800153c:	f000 f907 	bl	800174e <TIM_ITRx_SetConfig>
      break;
 8001540:	e01b      	b.n	800157a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6818      	ldr	r0, [r3, #0]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	6859      	ldr	r1, [r3, #4]
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	461a      	mov	r2, r3
 8001550:	f000 f8a0 	bl	8001694 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2140      	movs	r1, #64	; 0x40
 800155a:	4618      	mov	r0, r3
 800155c:	f000 f8f7 	bl	800174e <TIM_ITRx_SetConfig>
      break;
 8001560:	e00b      	b.n	800157a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4619      	mov	r1, r3
 800156c:	4610      	mov	r0, r2
 800156e:	f000 f8ee 	bl	800174e <TIM_ITRx_SetConfig>
        break;
 8001572:	e002      	b.n	800157a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001574:	bf00      	nop
 8001576:	e000      	b.n	800157a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001578:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a35      	ldr	r2, [pc, #212]	; (800167c <TIM_Base_SetConfig+0xe8>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d00b      	beq.n	80015c4 <TIM_Base_SetConfig+0x30>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015b2:	d007      	beq.n	80015c4 <TIM_Base_SetConfig+0x30>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a32      	ldr	r2, [pc, #200]	; (8001680 <TIM_Base_SetConfig+0xec>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d003      	beq.n	80015c4 <TIM_Base_SetConfig+0x30>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a31      	ldr	r2, [pc, #196]	; (8001684 <TIM_Base_SetConfig+0xf0>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d108      	bne.n	80015d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a28      	ldr	r2, [pc, #160]	; (800167c <TIM_Base_SetConfig+0xe8>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d017      	beq.n	800160e <TIM_Base_SetConfig+0x7a>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015e4:	d013      	beq.n	800160e <TIM_Base_SetConfig+0x7a>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a25      	ldr	r2, [pc, #148]	; (8001680 <TIM_Base_SetConfig+0xec>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d00f      	beq.n	800160e <TIM_Base_SetConfig+0x7a>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a24      	ldr	r2, [pc, #144]	; (8001684 <TIM_Base_SetConfig+0xf0>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d00b      	beq.n	800160e <TIM_Base_SetConfig+0x7a>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a23      	ldr	r2, [pc, #140]	; (8001688 <TIM_Base_SetConfig+0xf4>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d007      	beq.n	800160e <TIM_Base_SetConfig+0x7a>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a22      	ldr	r2, [pc, #136]	; (800168c <TIM_Base_SetConfig+0xf8>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d003      	beq.n	800160e <TIM_Base_SetConfig+0x7a>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a21      	ldr	r2, [pc, #132]	; (8001690 <TIM_Base_SetConfig+0xfc>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d108      	bne.n	8001620 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001614:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	4313      	orrs	r3, r2
 800161e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	4313      	orrs	r3, r2
 800162c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a0d      	ldr	r2, [pc, #52]	; (800167c <TIM_Base_SetConfig+0xe8>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d00b      	beq.n	8001664 <TIM_Base_SetConfig+0xd0>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <TIM_Base_SetConfig+0xf4>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d007      	beq.n	8001664 <TIM_Base_SetConfig+0xd0>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a0d      	ldr	r2, [pc, #52]	; (800168c <TIM_Base_SetConfig+0xf8>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d003      	beq.n	8001664 <TIM_Base_SetConfig+0xd0>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a0c      	ldr	r2, [pc, #48]	; (8001690 <TIM_Base_SetConfig+0xfc>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d103      	bne.n	800166c <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	691a      	ldr	r2, [r3, #16]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	615a      	str	r2, [r3, #20]
}
 8001672:	bf00      	nop
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	40012c00 	.word	0x40012c00
 8001680:	40000400 	.word	0x40000400
 8001684:	40000800 	.word	0x40000800
 8001688:	40014000 	.word	0x40014000
 800168c:	40014400 	.word	0x40014400
 8001690:	40014800 	.word	0x40014800

08001694 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001694:	b480      	push	{r7}
 8001696:	b087      	sub	sp, #28
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	f023 0201 	bic.w	r2, r3, #1
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	011b      	lsls	r3, r3, #4
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	f023 030a 	bic.w	r3, r3, #10
 80016d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	621a      	str	r2, [r3, #32]
}
 80016e6:	bf00      	nop
 80016e8:	371c      	adds	r7, #28
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr

080016f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b087      	sub	sp, #28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	f023 0210 	bic.w	r2, r3, #16
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800171a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	031b      	lsls	r3, r3, #12
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	4313      	orrs	r3, r2
 8001724:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800172c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	011b      	lsls	r3, r3, #4
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	621a      	str	r2, [r3, #32]
}
 8001744:	bf00      	nop
 8001746:	371c      	adds	r7, #28
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr

0800174e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800174e:	b480      	push	{r7}
 8001750:	b085      	sub	sp, #20
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001764:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	4313      	orrs	r3, r2
 800176c:	f043 0307 	orr.w	r3, r3, #7
 8001770:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68fa      	ldr	r2, [r7, #12]
 8001776:	609a      	str	r2, [r3, #8]
}
 8001778:	bf00      	nop
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr

08001782 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001782:	b480      	push	{r7}
 8001784:	b087      	sub	sp, #28
 8001786:	af00      	add	r7, sp, #0
 8001788:	60f8      	str	r0, [r7, #12]
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
 800178e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800179c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	021a      	lsls	r2, r3, #8
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	431a      	orrs	r2, r3
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	697a      	ldr	r2, [r7, #20]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	609a      	str	r2, [r3, #8]
}
 80017b6:	bf00      	nop
 80017b8:	371c      	adds	r7, #28
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d101      	bne.n	80017d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80017d4:	2302      	movs	r3, #2
 80017d6:	e04b      	b.n	8001870 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2202      	movs	r2, #2
 80017e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	4313      	orrs	r3, r2
 8001808:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a19      	ldr	r2, [pc, #100]	; (800187c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d013      	beq.n	8001844 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001824:	d00e      	beq.n	8001844 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a15      	ldr	r2, [pc, #84]	; (8001880 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d009      	beq.n	8001844 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a13      	ldr	r2, [pc, #76]	; (8001884 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d004      	beq.n	8001844 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a12      	ldr	r2, [pc, #72]	; (8001888 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d10c      	bne.n	800185e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800184a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	68ba      	ldr	r2, [r7, #8]
 8001852:	4313      	orrs	r3, r2
 8001854:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2201      	movs	r2, #1
 8001862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	bc80      	pop	{r7}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	40012c00 	.word	0x40012c00
 8001880:	40000400 	.word	0x40000400
 8001884:	40000800 	.word	0x40000800
 8001888:	40014000 	.word	0x40014000

0800188c <__libc_init_array>:
 800188c:	b570      	push	{r4, r5, r6, lr}
 800188e:	2600      	movs	r6, #0
 8001890:	4d0c      	ldr	r5, [pc, #48]	; (80018c4 <__libc_init_array+0x38>)
 8001892:	4c0d      	ldr	r4, [pc, #52]	; (80018c8 <__libc_init_array+0x3c>)
 8001894:	1b64      	subs	r4, r4, r5
 8001896:	10a4      	asrs	r4, r4, #2
 8001898:	42a6      	cmp	r6, r4
 800189a:	d109      	bne.n	80018b0 <__libc_init_array+0x24>
 800189c:	f000 f822 	bl	80018e4 <_init>
 80018a0:	2600      	movs	r6, #0
 80018a2:	4d0a      	ldr	r5, [pc, #40]	; (80018cc <__libc_init_array+0x40>)
 80018a4:	4c0a      	ldr	r4, [pc, #40]	; (80018d0 <__libc_init_array+0x44>)
 80018a6:	1b64      	subs	r4, r4, r5
 80018a8:	10a4      	asrs	r4, r4, #2
 80018aa:	42a6      	cmp	r6, r4
 80018ac:	d105      	bne.n	80018ba <__libc_init_array+0x2e>
 80018ae:	bd70      	pop	{r4, r5, r6, pc}
 80018b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80018b4:	4798      	blx	r3
 80018b6:	3601      	adds	r6, #1
 80018b8:	e7ee      	b.n	8001898 <__libc_init_array+0xc>
 80018ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80018be:	4798      	blx	r3
 80018c0:	3601      	adds	r6, #1
 80018c2:	e7f2      	b.n	80018aa <__libc_init_array+0x1e>
 80018c4:	0800192c 	.word	0x0800192c
 80018c8:	0800192c 	.word	0x0800192c
 80018cc:	0800192c 	.word	0x0800192c
 80018d0:	08001930 	.word	0x08001930

080018d4 <memset>:
 80018d4:	4603      	mov	r3, r0
 80018d6:	4402      	add	r2, r0
 80018d8:	4293      	cmp	r3, r2
 80018da:	d100      	bne.n	80018de <memset+0xa>
 80018dc:	4770      	bx	lr
 80018de:	f803 1b01 	strb.w	r1, [r3], #1
 80018e2:	e7f9      	b.n	80018d8 <memset+0x4>

080018e4 <_init>:
 80018e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018e6:	bf00      	nop
 80018e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018ea:	bc08      	pop	{r3}
 80018ec:	469e      	mov	lr, r3
 80018ee:	4770      	bx	lr

080018f0 <_fini>:
 80018f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018f2:	bf00      	nop
 80018f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018f6:	bc08      	pop	{r3}
 80018f8:	469e      	mov	lr, r3
 80018fa:	4770      	bx	lr
